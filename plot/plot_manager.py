import os
import uuid
import matplotlib.pyplot as plt


class PlotManager:
    @staticmethod
    def show_diff_histogram(h_histogram, l_histogram):
        h_max_peaks = h_histogram.max_peaks

        h_max_gradient_indexes = list()
        h_max_gradient_values = list()
        for peak in h_max_peaks:
            h_max_gradient_indexes.append(peak.x.index)
            h_max_gradient_values.append(peak.x.value)

        plt.subplot(211)
        plt.plot(list(range(len(h_histogram.data))), h_histogram.data, color='k')
        plt.plot(h_max_gradient_indexes, h_max_gradient_values, 'ro', marker='o', markersize=8, color='b')
        plt.grid()

        for peak in h_max_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='m')

        l_max_peaks = l_histogram.max_peaks

        l_max_gradient_indexes = list()
        l_max_gradient_values = list()
        for peak in l_max_peaks:
            l_max_gradient_indexes.append(peak.x.index)
            l_max_gradient_values.append(peak.x.value)

        plt.subplot(212)
        plt.plot(list(range(len(l_histogram.data))), l_histogram.data, color='k')
        plt.plot(l_max_gradient_indexes, l_max_gradient_values, 'ro', marker='o', markersize=8, color='b')
        plt.grid()

        for peak in l_max_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='m')

        plt.show()

    @staticmethod
    def save_diff_histogram(h_histogram, l_histogram, similarity, result_path):
        plt.clf()

        h_max_peaks = h_histogram.max_peaks

        h_max_gradient_indexes = list()
        h_max_gradient_values = list()
        for peak in h_max_peaks:
            h_max_gradient_indexes.append(peak.x.index)
            h_max_gradient_values.append(peak.x.value)

        plt.subplot(211)
        plt.plot(list(range(len(h_histogram.data))), h_histogram.data, color='k')
        plt.plot(h_max_gradient_indexes, h_max_gradient_values, 'ro', marker='o', markersize=8, color='b')
        plt.grid()

        for peak in h_max_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='m')

        l_max_peaks = l_histogram.max_peaks

        l_max_gradient_indexes = list()
        l_max_gradient_values = list()
        for peak in l_max_peaks:
            l_max_gradient_indexes.append(peak.x.index)
            l_max_gradient_values.append(peak.x.value)

        plt.subplot(212)
        plt.plot(list(range(len(l_histogram.data))), l_histogram.data, color='k')
        plt.plot(l_max_gradient_indexes, l_max_gradient_values, 'ro', marker='o', markersize=8, color='b')
        plt.grid()

        for peak in l_max_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='m')

        if similarity.r <= 0.01:
            prefix = 'd_'
            plt.suptitle('Different')

        else:
            prefix = 's_'
            plt.suptitle('Similar ({0:.2f})'.format(similarity.r))

        plt.savefig(os.path.join(result_path, prefix + str(uuid.uuid4()) + '.png'))

    @staticmethod
    def show_histogram(histogram):
        max_peaks = histogram.max_peaks
        min_peaks = histogram.min_peaks

        max_gradient_indexes = list()
        max_gradient_values = list()
        for peak in max_peaks:
            max_gradient_indexes.append(peak.x.index)
            max_gradient_values.append(peak.x.value)

        min_gradient_indexes = list()
        min_gradient_values = list()
        for peak in min_peaks:
            min_gradient_indexes.append(peak.x.index)
            min_gradient_values.append(peak.x.value)

        plt.plot(list(range(len(histogram.data))), histogram.data, color='k')
        plt.plot(max_gradient_indexes, max_gradient_values, 'ro', marker='o', markersize=4, color='b')
        plt.plot(min_gradient_indexes, min_gradient_values, 'ro', marker='o', markersize=4, color='g')

        for peak in max_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='m')

        for peak in min_peaks:
            inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
            inflection_point_values = [peak.x_left.value, peak.x_right.value]

            plt.plot(inflection_point_indexes, inflection_point_values, color='r')

        plt.grid()
        plt.show()
