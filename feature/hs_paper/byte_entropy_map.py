import platform
import os
import glob
import numpy as np


class ByteEntropyMap:
    def __init__(self):
        self.BYTE_SIZE = 256
        self.STEP_SIZE = 256
        self.WINDOW_SIZE = 1024
        self.HIST_SIZE = 16

        self.fileName = None
        self.result = None

        self.ROW_CUT = np.round(float(0.5) / self.HIST_SIZE, 4)
        self.COL_CUT = np.ceil(float(self.BYTE_SIZE) / self.HIST_SIZE)

    def _mapRowIndex(self, val):
        rowIdx = int(val / self.ROW_CUT)

        return rowIdx

    def _mapColIndex(self, val):
        colIdx = int(val / self.COL_CUT)

        return colIdx

    def _mapValue(self, entropy_list, histogram_list):
        entropyMatrix = np.zeros((self.HIST_SIZE, self.HIST_SIZE), dtype=int)

        for entropyVal, byteHist in zip(entropy_list, histogram_list):
            for byte_idx in range(self.BYTE_SIZE):
                rowIdx = self._mapRowIndex(entropyVal[byte_idx])
                colIdx = self._mapColIndex(byte_idx)

                entropyMatrix[rowIdx,colIdx] += byteHist[byte_idx]

        return entropyMatrix

    def _getEntropy(self, byteFreq):
        entropyVal = -(np.log(byteFreq) * byteFreq)

        return entropyVal

    def _slide_window(self, byteSeq):
        entropy_list = list()
        histogram_list = list()

        for i in range(0, len(byteSeq) - self.WINDOW_SIZE +1, self.STEP_SIZE):
            byteWindow = byteSeq[i:i+self.WINDOW_SIZE]
            byteWindow = np.array(byteWindow)

            byteHist = np.histogram(byteWindow, bins=256)[0]

            byteFreq = (byteHist / float(np.sum(byteHist))) + 1e-10
            # entropyFreq = map(lambda x:self._getEntropy(x), byteFreq)
            entropyFreq = self._getEntropy(byteFreq)

            histogram_list.append(byteHist)
            entropy_list.append(entropyFreq)

        return (entropy_list, histogram_list)

    def _extractByteSeq(self, inputPath):
        if platform.system() == 'Linux':
            byte_data = self._read_bytes_in_linux(inputPath)

        elif platform.system() == 'Windows':
            byte_data = self._read_bytes_in_windows(inputPath)

        else:
            raise Exception('Invalid operating system')

        return byte_data

    def _read_bytes_in_windows(self, file_path):
        if file_path is None:
            raise Exception('File path is none. {0}'.format(file_path))

        with open(file_path, 'rb') as file_descriptor:
            bytes = file_descriptor.read()

        byte_data = list()
        for byte in bytes:
            byte_data.append(int('{:02X}'.format(byte), 16))

        return byte_data

    def _read_bytes_in_linux(self, file_path):
        if file_path is None:
            raise Exception('File path is none. {0}'.format(file_path))

        with open(file_path, 'rb') as file_descriptor:
            byte_data = map(ord, file_descriptor.read())

        return byte_data

    def saveResult(self):
        resultPath = os.path.join(self.resDir,self.fileName)

        res = self.result
        res = res.reshape(1,-1).flatten()

        fd = open(resultPath+'.'+self.symbol, 'w')
        resContents = [self.fileName]

        for i in range(len(res)):
            resContents.append('%d:%d'%(i+1, res[i]))

        fd.write(' '.join(resContents))
        fd.close()

    def get_string(self):
        feature = ''

        index = 0
        for line in self.result:
            for b in line:
                feature += '{0}:{1} '.format(index, b)

                index += 1

        return feature.strip()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        byteSequence = self._extractByteSeq(inputPath)
        (entropy_list, histogram_list) = self._slide_window(byteSequence)
        # (entropy_list) = self._slide_window(byteSequence)

        self.result = self._mapValue(entropy_list, histogram_list)

        return self.result


def get_file_name(file_path):
    file_name = os.path.basename(file_path)
    file_name = os.path.splitext(file_name)[0]

    return file_name


def write_bem_in_dir(src_dir, dest_dir):
    files = glob.glob(os.path.join(src_dir, '*'))

    print('---------------------------------------------')
    print('Source directory: {0}'.format(src_dir))
    print('Destination directory: {0}'.format(dest_dir))
    print('The number of files: {0}'.format(len(files)))
    print()

    for file_path in files:
        if os.path.isdir(file_path):
            continue

        file_name = get_file_name(file_path)

        dest_file_path = os.path.join(dest_dir, file_name + '.bem')

        generator = ByteEntropyMap()
        generator.fit_transform(file_path)

        with open(dest_file_path, 'w') as file_descriptor:
            file_descriptor.write(generator.get_string())


def write_bem_in_file(file_path, dest_dir):
    file_name = get_file_name(file_path)

    dest_file_path = os.path.join(dest_dir, file_name + '.bem')

    generator = ByteEntropyMap()
    generator.fit_transform(file_path)

    with open(dest_file_path, 'w') as file_descriptor:
        file_descriptor.write(generator.get_string())


if __name__ == '__main__':
    SRC_EXE_DIR_PATH = '/home/hadoop/Data/SSecurityData/dataset_behavior_v2/exe'
    DSC_HISTOGRAM_DIR_PATH = '/home/hadoop/byunghyun_histogram/Data/byte_entropy_map'

    if not os.path.exists(DSC_HISTOGRAM_DIR_PATH):
        os.mkdir(DSC_HISTOGRAM_DIR_PATH)

    families = ['ADWARE', 'BENIGN', 'DOWNLOADER', 'HIDER', 'PACKED', 'REMOTECON', 'REPLICATOR', 'TROJWARE', 'WARN']
    for family in families:
        exe_root_dir_path = os.path.join(SRC_EXE_DIR_PATH, family)

        bem_dir_path = os.path.join(DSC_HISTOGRAM_DIR_PATH, family)
        if not os.path.exists(bem_dir_path):
            os.mkdir(bem_dir_path)

        dir_paths = list()
        exe_paths = list()

        paths = glob.glob(os.path.join(exe_root_dir_path, '*'))
        for path in paths:
            if os.path.isdir(path):
                dir_paths.append(path)

            else:
                exe_paths.append(path)

        for dir_path in dir_paths:
            write_bem_in_dir(dir_path , bem_dir_path)

        for file_path in exe_paths:
            write_bem_in_file(file_path, bem_dir_path)