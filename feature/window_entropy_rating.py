import platform
import os
import math
import glob
import numpy as np
from scipy.stats import entropy
import matplotlib.pyplot as plt
import cv2


class WindowEntropyRating:
    WINDOW_SIZE = 1024
    WINDOW_STRIDE = 256
    MAX_ENTROPY = 0.4

    def __init__(self, level=1, file_path=None):
        assert file_path is not None, 'File path is none'

        self.level = level
        self.file_path = file_path

        self.byte_histograms = None
        self.frequency_histograms = None
        self.probability_histograms = None
        self.entropy_histograms = None
        self.window_entropy_map = None

        self.fit_transform()

    def fit_transform(self):
        if platform.system() == 'Linux':
            byte_data = self._read_bytes_in_linux(self.file_path)

        elif platform.system() == 'Windows':
            byte_data = self._read_bytes_in_windows(self.file_path)

        else:
            byte_data = self.read_file()

        self.byte_histograms = self._convert_window_histograms(byte_data)
        self.frequency_histograms = self._convert_frequency_histograms(self.byte_histograms)
        self.probability_histograms = self._convert_probability_histograms(self.frequency_histograms)
        self.entropy_histograms = self._convert_entropy_histograms(self.probability_histograms)

        self.window_entropy_map = self._generate_window_entropy_map(self.entropy_histograms)

    def read_file(self):
        with open(self.file_path, 'r') as file_descriptor:
            lines = file_descriptor.readlines()

        byte_data = list()
        for line in lines:
            line = line.strip()

            byte_data.append(int(line))

        return byte_data

    def _read_bytes_in_windows(self, file_path):
        with open(file_path, 'rb') as file_descriptor:
            bytes = file_descriptor.read()

        byte_data = list()
        for byte in bytes:
            byte_data.append(int('{:02X}'.format(byte), 16))

        return byte_data

    def _read_bytes_in_linux(self, file_path):
        with open(file_path, 'rb') as file_descriptor:
            byte_data = map(ord, file_descriptor.read())
            
        return byte_data

    def _convert_window_histograms(self, byte_data):
        byte_histograms = list()
        for index in range(0, len(byte_data) - WindowEntropyRating.WINDOW_SIZE + 1, WindowEntropyRating.WINDOW_STRIDE):
            window_bytes = byte_data[index: index + WindowEntropyRating.WINDOW_SIZE]

            byte_histograms.append(window_bytes)

        return byte_histograms

    def _convert_frequency_histograms(self, byte_histograms):
        frequency_histograms = list()
        for byte_histogram in byte_histograms:
            frequency_histogram = [0] * 256

            for byte in byte_histogram:
                frequency_histogram[byte] = frequency_histogram[byte] + 1

            # for i in range(0, len(frequency_histogram)):
            #     if frequency_histogram[i] != 0:
            #         frequency_histogram[i] = frequency_histogram[i] / WindowEntropyRating.WINDOW_SIZE

            frequency_histograms.append(frequency_histogram)

        return frequency_histograms

    def _convert_probability_histograms(self, frequency_histograms):
        probability_histograms = list()
        for frequency_histogram in frequency_histograms:
            probability_histogram = [0] * 256

            for i in range(0, len(frequency_histogram)):
                if frequency_histogram[i] != 0:
                    probability_histogram[i] = frequency_histogram[i] / WindowEntropyRating.WINDOW_SIZE

            probability_histograms.append(probability_histogram)

        return probability_histograms

    def _convert_entropy_histograms(self, probability_histograms):
        entropy_histograms = list()
        for frequency_histogram in probability_histograms:
            entropy_histogram = list()

            for frequency in frequency_histogram:
                entropy_histogram.append(self._get_entropy(frequency))

            entropy_histograms.append(entropy_histogram)

        return entropy_histograms

    def _get_entropy(self, frequency):
        if frequency == 0:
            return 0

        return -(np.log(frequency) * frequency)

    def _convert_frequency_count_map(self, frequency_histograms):
        frequency_count_map = list()
        for _ in range(0, self.level):
            frequency_count_map.append([0] * 256)

        control_points = list()

        interval_value = math.floor(WindowEntropyRating.WINDOW_SIZE / self.level)
        for i in range(0, self.level):
            control_points.append(interval_value * (i + 1))

        for frequency_histogram in frequency_histograms:
            for bin_index in range(0, len(frequency_histogram)):
                level_index = -1

                for point in control_points:
                    level_index += 1

                    if frequency_histogram[bin_index] < point:
                        break

                frequency_count_map[level_index][bin_index] = frequency_count_map[level_index][bin_index] + 1

        return frequency_count_map

    def _generate_window_entropy_map(self, entropy_histograms):
        window_entropy_map = list()
        for _ in range(0, self.level):
            window_entropy_map.append([0] * 256)

        control_points = list()

        interval_value = WindowEntropyRating.MAX_ENTROPY / self.level
        for i in range(0, self.level):
            control_points.append(interval_value * (i + 1))

        for entropy_histogram in entropy_histograms:
            for bin_index in range(0, len(entropy_histogram)):
                level_index = -1

                for point in control_points:
                    level_index += 1

                    if entropy_histogram[bin_index] < point:
                        break

                window_entropy_map[level_index][bin_index] = window_entropy_map[level_index][bin_index] + entropy_histogram[bin_index]

        return window_entropy_map

    def _get_index(self, entropy):
        return min(self.level - 1, math.ceil(entropy / self.level))

    def to_string(self, label):
        feature = '{0}'.format(label)

        index = 0
        for window_entropy in self.window_entropy_map:
            for entropy in window_entropy:
                feature += ' {0}:{1}'.format(index, entropy)

                index += 1

        return feature


if __name__ == '__main__':
    file_paths = glob.glob('C:\\Users\\BAEK\\Desktop\\Test_Entropy\\dataset\\*')
    level = 2

    for file_path in file_paths:
        file_name = os.path.basename(file_path)
        file_name = os.path.splitext(file_name)[0]

        window_entropy_rating = WindowEntropyRating(level=level, file_path=file_path)

        print(window_entropy_rating.to_string(0))

        # x = window_entropy_rating.window_entropy_map
        # print(x)

        break

        # matrix = np.asarray(x, dtype=np.uint8)
        # matrix = matrix * 32
        #
        # cv2.imwrite('C:\\Users\\BAEK\\Desktop\\Test_Entropy\\image\\{0}_{1}.bmp'.format(file_name, level), matrix)
