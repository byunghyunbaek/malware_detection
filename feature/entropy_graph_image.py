import os
import numpy as np
import cv2

from sklearn.preprocessing import MinMaxScaler

from dataset.data_reader import DataReader


class EntropyGraphImage:
    def __init__(self, x=None, img_size=(16, 16), cell_size=(4, 4), number_of_types=3):
        self.x = x
        self.img_size = img_size
        self.cell_size = cell_size
        self.number_of_types = number_of_types

        self.origin_image = list()
        self.graph_cells = list()
        self.type_of_entropy_images = list()
        self.entropy_image = list()

        self._generate_graph_cell()

    def _generate_graph_cell(self):
        if self.img_size[0] * self.img_size[1] != len(self.x):
            raise Exception('Invalid image size. {0} != {1}'.format(len(self.x), self.img_size))

        self.origin_image = self.x.reshape(self.img_size[0], self.img_size[1])
        self.origin_image = self._scaling_image(self.origin_image)

        if (self.img_size[0] % self.cell_size[0] != 0) or (self.img_size[1] % self.cell_size[1] != 0):
            raise Exception('Invalid cell size. {0}, {1}'.format(self.img_size, self.cell_size))

        number_of_x_cells = int(self.img_size[0] / self.cell_size[0])
        number_of_y_cells = int(self.img_size[1] / self.cell_size[1])

        self.graph_cells = list()

        for y_index in range(0, number_of_y_cells):
            graph_cells = list()
            for x_index in range(0, number_of_x_cells):
                cell_data = self._get_cell_data(x_index, y_index, self.origin_image, number_of_x_cells, number_of_y_cells)

                graph_cell = GraphCell(cell_data=cell_data)
                graph_cells.append(graph_cell)

            self.graph_cells.append(graph_cells)

        self._set_type_images()

    def _scaling_image(self, image):
        scaler = MinMaxScaler(feature_range=(0, 255))
        scaler.fit(image)

        image = scaler.transform(image)
        image = image.astype('uint8')

        return image

    def _get_cell_data(self, x_index, y_index, matrix, number_of_x_cells, number_of_y_cells):
        y_stack = np.vsplit(matrix, number_of_y_cells)[y_index]

        return np.hsplit(y_stack, number_of_x_cells)[x_index]

    def _set_type_images(self):
        for type_index in range(0, self.number_of_types):
            x_shape = np.asarray(self.graph_cells).shape[0]
            y_shape = np.asarray(self.graph_cells).shape[1]

            type_of_image = list()

            for y_index in range(0, y_shape):
                row = list()
                for x_index in range(0, x_shape):
                    row.append(self.graph_cells[x_index][y_index].entropy_of_types[type_index])

                type_of_image.append(row)

            self.type_of_entropy_images.append(np.asarray(type_of_image))

    def show_orign_graph_image(self, file_path=None):
        if file_path is None:
            cv2.imshow('original', self.origin_image)
            cv2.waitKey(0)

            return

        cv2.imwrite(file_path, self.origin_image)

    def show_type_of_entropy_image(self, file_paths=None):
        if file_paths is None:
            for type_of_entropy_image in self.type_of_entropy_images:
                cv2.imshow('type of entropy image', type_of_entropy_image)
                cv2.waitKey(0)

            return

        for index, file_path in zip(range(0, self.number_of_types), file_paths):
            cv2.imwrite(file_path, self.type_of_entropy_images[index])

    def show_entropy_graph_image(self, file_path=None):
        entropy_graph_image = np.zeros(self.type_of_entropy_images[0].shape)
        for image in self.type_of_entropy_images:
            entropy_graph_image = entropy_graph_image + image

        if file_path is None:
            cv2.imshow('entropy graph', entropy_graph_image)
            cv2.waitKey(0)

            return

        cv2.imwrite(file_path, entropy_graph_image)


class GraphCell:
    MAX_VALUE = 255

    def __init__(self, cell_data=None, number_of_types=3):
        self.cell_data = np.asarray(cell_data)
        self.number_of_types = number_of_types

        self.count_of_types = self._initialize_count_of_type()
        self.probability_of_types = None
        self.entropy_of_types = None

        self._calc_entropy_types()

    def _initialize_count_of_type(self):
        count_of_types = dict()

        for i in range(0, self.number_of_types):
            count_of_types[i] = 0

        return count_of_types

    def _calc_entropy_types(self):
        x_shape = self.cell_data.shape[0]
        y_shape = self.cell_data.shape[1]

        for x_index in range(0, x_shape):
            for y_index in range(0, y_shape):
                range_points = self._get_type(self.cell_data[x_index][y_index])

                self.count_of_types[range_points] = self.count_of_types.get(range_points) + 1

        self.probability_of_types = list()
        for value in self.count_of_types.values():
            self.probability_of_types.append(value / (x_shape * y_shape))

        self.entropy_of_types = list()
        for probability in self.probability_of_types:
            self.entropy_of_types.append(self._get_entropy(probability))

    def _get_entropy(self, probability):
        if probability == 0:
            return 0

        return -(np.log(probability) * probability)

    def _get_type(self, value):
        range_points = list()

        interval_value = GraphCell.MAX_VALUE / self.number_of_types
        for i in range(0, self.number_of_types):
            range_points.append(interval_value * (i + 1))

        range_type = 0
        for point in range_points:
            if value <= point:
                break

            range_type += 1

        return range_type


if __name__ == '__main__':
    feature_path = r'C:\Users\BAEK\Desktop\research\DataHistogram\data\peak_features\binary_40000.spa'
    dest_dir_path = r'C:\Users\BAEK\Desktop\research\EntropyGraphImage\image'

    dataset = DataReader(file_name=feature_path).get_dataset()
    dataset.scale()
    dataset.shuffle()

    print(feature_path)
    print(dataset)

    x = dataset.X[0]

    entropy_graph_image = EntropyGraphImage(x=x, img_size=(16, 16), cell_size=(4, 4), number_of_types=3)
    entropy_graph_image.show_orign_graph_image(file_path=os.path.join(dest_dir_path, 'origin.PNG'))
    entropy_graph_image.show_type_of_entropy_image(file_paths=[os.path.join(dest_dir_path, '1.PNG'), os.path.join(dest_dir_path, '2.PNG'), os.path.join(dest_dir_path, '3.PNG')])
    entropy_graph_image.show_entropy_graph_image(file_path=os.path.join(dest_dir_path,'entropy_graph_image.PNG'))
