import os
import csv
import glob


def get_family_name(label):
    if label == '1':
        return 'Ramnit'

    elif label == '2':
        return 'Lollipop'

    elif label == '3':
        return 'Kelihos_ver3'

    elif label == '4':
        return 'Vundo'

    elif label == '5':
        return 'Simda'

    elif label == '6':
        return 'Tracur'

    elif label == '7':
        return 'Kelihos_ver1'

    elif label == '8':
        return 'Obfuscator.ACY'

    elif label == '9':
        return 'Gatak'

    else:
        raise Exception('Invalid malware family class. [{0}]'.format(label))


def get_label_dictionary(label_csv_path):
    label_dicts = dict()

    with open(label_csv_path, 'r') as file_descriptor:
        reader = csv.reader(file_descriptor, delimiter=',')

        for line in reader:
            file_name = line[0]
            label = line[1]

            # label_dicts[file_name] = get_family_name(label)
            label_dicts[file_name] = label

    return label_dicts


def get_features(src_dir_path, labels_dictionary):
    features = list()

    file_paths = glob.glob(os.path.join(src_dir_path, '*'))
    for file_path in file_paths:
        file_name = os.path.basename(file_path)
        file_name = os.path.splitext(file_name)[0]

        with open(file_path, 'r') as file_descriptor:
            line = file_descriptor.readline()

        feature = '{0} {1}'.format(labels_dictionary[file_name], line)
        features.append(feature)

    return features


LABEL_CSV_PATH = r'D:\PythonWorkspace\workspace\malware_detection\trainLabels.csv'
TRAIN_SRC_DIR_PATH = r'D:\PythonWorkspace\workspace\malware_detection\histogram\entropy_histogram_l6'
TRAIN_DSC_FEATURE_PATH = r'D:\PythonWorkspace\workspace\malware_detection\feature\entropy_histogram_l6.spa'


if __name__ == '__main__':
    label_dicts = get_label_dictionary(LABEL_CSV_PATH)
    features = get_features(TRAIN_SRC_DIR_PATH, label_dicts)

    with open(TRAIN_DSC_FEATURE_PATH, 'w') as file_descriptor:
        for feature in features:
            file_descriptor.write(feature)
            file_descriptor.write('\n')
