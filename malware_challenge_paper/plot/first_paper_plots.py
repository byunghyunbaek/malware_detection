import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import itertools


def plot_normal_accuracy_per_class():
    classes = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak']
    bar_width = 0.4
    opacity = 0.8
    line_markers = ['D', 'v', '^', 'o']
    hatches = ['/////', '//', '\\\\\\\\', '\\\\']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    indexes = np.arange(len(classes))

    without_prototype_selection = [99.3, 99.7, 100, 98.9, 88.1, 96.3, 99.2, 95.4, 98.1]
    with_prototype_selection = [99.3, 99.6, 100, 98.3, 85.7, 97.5, 98.7, 94.4, 98.9]
    prototype_rate = [56.59, 66.06, 30.05, 41.89, 66.67, 60.72, 13.57, 23.21, 65.35]

    fig, ax1 = plt.subplots(figsize=(8, 5))

    plt.grid(True, 'major', 'y', ls='--', lw=.1, c='k', alpha=1)

    ax1_lns1 = ax1.plot(indexes, without_prototype_selection, marker=line_markers[0], markeredgecolor=(0.0, 0.0, 0.0),
                        markersize=6, markeredgewidth=0.5, linestyle=line_styles[0], color=(0.2, 0.2, 0.2),
                        label='L6 accuracy')
    ax1_lns2 = ax1.plot(indexes, with_prototype_selection, marker=line_markers[1], markeredgecolor=(0.0, 0.0, 0.0),
                        markersize=6, markeredgewidth=0.5, linestyle=line_styles[1], color=(0.3, 0.3, 0.3),
                        label='L6 accuracy')

    ax1.set_xlabel('Malware family', fontsize=10)
    ax1.set_ylabel('Accuracy(%)', fontsize=10)
    ax1.set_ylim(75, 102)
    ax1.set_xticks(np.arange(len(classes)))
    ax1.set_xticklabels(classes, rotation=25)

    ax2 = ax1.twinx()
    ax2_lns1 = ax2.bar(indexes, prototype_rate, alpha=opacity, color=(0.9, 0.9, 0.9),
                       width=bar_width, hatch=hatches[1], label='Prototype rate', edgecolor='black', linewidth=1)
    ax2.set_ylabel('Prototype rate(%)', fontsize=10)
    ax2.set_ylim(0, 100)

    ax1.set_zorder(ax2.get_zorder() + 1)
    ax1.patch.set_visible(False)

    legend = ax1_lns1 + ax1_lns2 + [ax2_lns1]
    labels = [l.get_label() for l in legend]

    plt.tick_params(labelsize=9)
    plt.legend(legend, labels, loc='lower left')
    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\accuracy_and_prototypes_per_class.png')

    # plt.show()


def plot_accuracy_per_class(title= '', accuracy_without_prototype=None, accuracy_with_prototype=None, labels=None, fig_path=None):
    classes = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak']
    bar_width = 0.4
    line_markers = ['D', 'v', '^', 'o']
    hatches = itertools.cycle(['/////', '\\\\\\', '//', '--'])

    data_frame = pd.DataFrame({
        'without prototype selection': [99.3, 99.7, 100, 98.9, 88.1, 96.3, 99.2, 95.4, 98.1],
        'with prototype selection': [99.3, 99.6, 100, 98.3, 85.7, 97.5, 98.7, 94.4, 98.9],
        'prototype rate': [56.59, 66.06, 30.05, 41.89, 66.67, 60.72, 13.57, 23.21, 65.35],
    })

    sns.set(style='darkgrid', color_codes=True)

    ax1 = data_frame[['without prototype selection', 'with prototype selection']].plot(kind='bar', width=bar_width, secondary_y=['prototype rate'], legend=False)
    number_of_locations = len(classes)
    for i, bar in enumerate(ax1.patches):
        if i % number_of_locations == 0:
            hatch = next(hatches)

        bar.set_hatch(hatch)

    ax1.set_xlabel('Malware Family', fontsize=11)
    ax1.set_ylabel('Accuracy(%)', fontsize=11)
    ax1.set_ylim(50, 100)
    ax1.set_xticklabels(classes)

    ax2 = data_frame['prototype rate'].plot(kind='line', secondary_y=True, ax=ax1, legend=False)
    for i, line in enumerate(ax2.get_lines()):
        line.set_marker(line_markers[i])
        line.set_color('green')
        line.set_linestyle('--')

        index = 0
        for x, y in zip(line.get_xdata(), line.get_ydata()):
            plt.annotate('{0}%'.format(data_frame['prototype rate'][index]), (x, y), fontsize=14, textcoords='offset points', xytext=(25, 7), ha='center', weight='bold')

            index += 1

    ax2.set_ylabel('prototype rate(%)')
    ax2.set_ylim(0, 100)
    ax2.set_xlim(-0.5, 8.5)

    ax1_legend = ax1.legend(loc='lower left')
    ax2_legend = ax2.legend(loc='lower left', bbox_to_anchor=(0, 0.07))

    ax1.add_artist(ax1_legend)
    plt.gcf().tight_layout()
    plt.show()


def plot_normal_accuracy_per_theta():
    bins = ['0.5', '0.1', '0.05', '0.01', '0.005', '0.001', '0.0005', '0.0001', '0.00005']
    bar_width = 0.15
    opacity = 0.8
    line_markers = ['D', 'v', '^', 'o']
    hatches = ['/////', '//', '\\\\\\\\', '\\\\']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    indexes = np.arange(len(bins))

    L1_accuracy = [65.98, 85.38, 87.67, 95.78, 97.69, 98.07, 97.95, 98.12, 97.87]
    L2_accuracy =  [54.38, 76.49, 86.71, 97.42, 98.00, 98.21, 98.27, 98.23, 98.21]
    L4_accuracy = [69.05, 68.46, 94.68, 98.35, 98.64, 98.59, 98.62, 98.64, 98.72]
    L6_accuracy = [69.29, 76.84, 95.95, 98.73, 98.73, 98.75, 98.73, 98.88, 98.79]
    L1_prototype_rate = [09.53, 20.78, 25.11, 41.16, 51.72, 80.47, 93.70, 99.10, 99.57]
    L2_prototype_rate = [11.70, 23.00, 28.75, 47.58, 62.89, 93.01, 96.90, 99.54, 99.71]
    L4_prototype_rate = [15.13, 29.89, 36.87, 66.09, 78.45, 98.11, 99.10, 99.78, 99.83]
    L6_prototype_rate = [16.94, 30.50, 37.58, 69.94, 87.56, 98.70, 99.38, 99.81, 99.85]

    fig, ax1 = plt.subplots(figsize=(12, 6))

    plt.grid(True, 'major', 'y', ls='--', lw=.1, c='k', alpha=1)

    ax1_lns1 = ax1.plot(indexes + bar_width + (bar_width / 2), L1_accuracy, marker=line_markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=6,
                        markeredgewidth=0.5, linestyle=line_styles[0], color=(0.65, 0.65, 0.65), label='L1 accuracy')
    ax1_lns2 = ax1.plot(indexes + bar_width + (bar_width / 2), L2_accuracy, marker=line_markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=6,
                        markeredgewidth=0.5, linestyle=line_styles[1], color=(0.50, 0.50, 0.50), label='L2 accuracy')
    ax1_lns3 = ax1.plot(indexes + bar_width + (bar_width / 2), L4_accuracy, marker=line_markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=6,
                        markeredgewidth=0.5, linestyle=line_styles[2], color=(0.35, 0.35, 0.35), label='L4 accuracy')
    ax1_lns4 = ax1.plot(indexes + bar_width + (bar_width / 2), L6_accuracy, marker=line_markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=6,
                        markeredgewidth=0.5, linestyle=line_styles[3], color=(0.2, 0.2, 0.2), label='L6 accuracy')

    ax1.set_xlabel(r'$\theta$', fontsize=10)
    ax1.set_ylabel('Accuracy(%)', fontsize=10)
    ax1.set_ylim(45, 100)

    ax2 = ax1.twinx()
    ax2_lns1 = ax2.bar(indexes, L1_prototype_rate, alpha=opacity, color=(0.9, 0.9, 0.9),
                       width=bar_width, hatch=hatches[0], label='L1 prototype rate', edgecolor='black', linewidth=1)
    ax2_lns2 = ax2.bar(indexes + bar_width, L2_prototype_rate, alpha=opacity, color=(0.75, 0.75, 0.75),
                       width=bar_width, hatch=hatches[1], label='L2 prototype rate', edgecolor='black', linewidth=1)
    ax2_lns3 = ax2.bar(indexes + (bar_width * 2), L4_prototype_rate, alpha=opacity, color=(0.6, 0.6, 0.6),
                       width=bar_width, hatch=hatches[2], label='L4 prototype rate', edgecolor='black', linewidth=1)
    ax2_lns4 = ax2.bar(indexes + (bar_width * 3), L6_prototype_rate, alpha=opacity, color=(0.45, 0.45, 0.45),
                       width=bar_width, hatch=hatches[3], label='L6 prototype rate', edgecolor='black', linewidth=1)

    ax2.set_ylabel('Prototype rate(%)', fontsize=10)

    legend = ax1_lns1 + ax1_lns2 + ax1_lns3 + ax1_lns4 + [ax2_lns1] + [ax2_lns2] + [ax2_lns3] + [ax2_lns4]
    labels = [l.get_label() for l in legend]

    plt.tick_params(labelsize=9)
    plt.xticks(indexes + bar_width + bar_width / 2, bins)
    plt.legend(legend, labels, loc='best')
    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\accuracy_and_prototypes_per_theta.png')

    # plt.show()


def plot_accuracy_per_theta():
    bins = ['0.5', '0.1', '0.05', '0.01', '0.005', '0.001', '0.0005', '0.0001', '0.00005']
    bar_width = 0.5
    line_markers = ['D', 'v', '^', 'o']
    hatches = itertools.cycle(['/////', '\\\\\\', '//', '--'])

    data_frame = pd.DataFrame({
        'L1_accuracy': [65.98, 85.38, 87.67, 95.78, 97.69, 98.07, 97.95, 98.12, 97.87],
        'L2_accuracy': [54.38, 76.49, 86.71, 97.42, 98.00, 98.21, 98.27, 98.23, 98.21],
        'L4_accuracy': [69.05, 68.46, 94.68, 98.35, 98.64, 98.59, 98.62, 98.64, 98.72],
        'L6_accuracy': [69.29, 76.84, 95.95, 98.73, 98.73, 98.75, 98.73, 98.88, 98.79],
        'L1_prototype_rate': [09.53, 20.78, 25.11, 41.16, 51.72, 80.47, 93.70, 99.10, 99.57],
        'L2_prototype_rate': [11.70, 23.00, 28.75, 47.58, 62.89, 93.01, 96.90, 99.54, 99.71],
        'L4_prototype_rate': [15.13, 29.89, 36.87, 66.09, 78.45, 98.11, 99.10, 99.78, 99.83],
        'L6_prototype_rate': [16.94, 30.50, 37.58, 69.94, 87.56, 98.70, 99.38, 99.81, 99.85],
    })

    sns.set(style='darkgrid', color_codes=True)

    ax1 = data_frame[['L1_accuracy', 'L2_accuracy', 'L4_accuracy', 'L6_accuracy']].plot(kind='line', legend=False)
    for i, line in enumerate(ax1.get_lines()):
        line.set_marker(line_markers[i])

    ax1.set_xlabel(r'$\theta$', fontsize=11)
    ax1.set_ylabel('Accuracy(%)', fontsize=11)
    ax1.set_ylim(40, 100)

    ax2 = data_frame[['L1_prototype_rate', 'L2_prototype_rate', 'L4_prototype_rate', 'L6_prototype_rate']].plot(kind='bar', width=bar_width, secondary_y=True, ax=ax1, legend=False)
    number_of_locations = len(bins)
    for i, bar in enumerate(ax2.patches):
        if i % number_of_locations == 0:
            hatch = next(hatches)

        bar.set_hatch(hatch)

    ax2.set_ylabel('prototype rate(%)')
    ax2.set_ylim(0, 110)

    ax1.set_xticklabels(bins)

    ax1_legend = ax1.legend(loc='bottom left')
    ax2_legend = ax2.legend(loc='bottom left', bbox_to_anchor=(0.148, 0.87))

    ax1.add_artist(ax1_legend)

    plt.gcf().tight_layout()
    plt.show()


def plot_accuracy_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [0.9541, 0.9648, 0.9675, 0.9703]
    random_forest = [0.9794, 0.9825, 0.9874, 0.9876]
    xgboost = [0.9810, 0.9862, 0.9905, 0.9925]
    cnn = [0.9761, 0.9779, 0.9851, 0.9875]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('Accuracy', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\accuracy.png')
    # plt.show()


def plot_precision_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [0.9017, 0.9295, 0.9160, 0.9323]
    random_forest = [0.9596, 0.9668, 0.9750, 0.9824]
    xgboost = [0.9731, 0.9778, 0.9873, 0.9882]
    cnn = [0.9786, 0.9811, 0.9861, 0.9889]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('Precision', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\Precision.png')
    # plt.show()


def plot_recall_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [0.9050, 0.9318, 0.9409, 0.9224]
    random_forest = [0.9620, 0.9666, 0.9722, 0.9706]
    xgboost = [0.9604, 0.9708, 0.9681, 0.9711]
    cnn = [0.9751, 0.9767, 0.9849, 0.9870]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('Recall', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\Recall.png')


def plot_f1_score_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [0.9016, 0.9303, 0.9261, 0.9262]
    random_forest = [0.9590, 0.9663, 0.9730, 0.9755]
    xgboost = [0.9652, 0.9738, 0.9764, 0.9787]
    cnn = [0.9768, 0.9789, 0.9855, 0.9880]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('F1-score', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\F1-score.png')


def plot_balanced_error_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [0.0950, 0.0682, 0.0591, 0.0776]
    random_forest = [0.0380, 0.0334, 0.0278, 0.0294]
    xgboost = [0.0396, 0.0292, 0.0319, 0.0289]
    cnn = [0.0665, 0.0749, 0.0371, 0.0324]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('Balanced error', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\Balanced_error.png')


def plot_time_by_classifiers():
    markers = ['D', 'v', '^', 'o']
    line_styles = ['dashdot', 'dotted', 'dashed', (0, (3, 1, 1, 1, 1, 1))]
    bins = ['L1', 'L2', 'L4', 'L6']
    decision_tree = [1.2751, 1.4132, 1.6416, 2.0484]
    random_forest = [4.9507, 4.0641, 3.8776, 4.1029]
    xgboost = [37.474, 57.204, 94.115, 133.52]
    cnn = [185.29, 420.72, 1034.8, 1658.2]

    plt.subplots(figsize=(4, 3))

    plt.plot(bins, decision_tree, marker=markers[0], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[0], color=(0.2, 0.2, 0.2), label='Decision Tree')
    plt.plot(bins, random_forest, marker=markers[1], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[1], color=(0.35, 0.35, 0.35), label='Random Forest')
    plt.plot(bins, xgboost, marker=markers[2], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[2], color=(0.50, 0.50, 0.50), label='XgBoost')
    plt.plot(bins, cnn, marker=markers[3], markeredgecolor=(0.0, 0.0, 0.0), markersize=5, markeredgewidth=0.5,
             linestyle=line_styles[3], color=(0.65, 0.65, 0.65), label='CNN')

    plt.ylabel('Learning time(s)', fontsize=9)
    plt.tick_params(labelsize=8)
    plt.legend(loc='best', fontsize=8)
    plt.grid()

    plt.tight_layout()
    plt.savefig(r'C:\Users\BAEK\Desktop\research\Malware\performance\ms_data\image\Learning_time.png')


if __name__ == '__main__':
    plot_normal_accuracy_per_class()
    # plot_accuracy_per_class()
    # new_plot_accuracy_per_theta()

    # plot_accuracy_by_classifiers()
    # plot_precision_by_classifiers()
    # plot_recall_by_classifiers()
    # plot_f1_score_by_classifiers()
    # plot_balanced_error_by_classifiers()
    # plot_time_by_classifiers()

    # plot_normal_accuracy_per_class()

