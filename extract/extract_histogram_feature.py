from scipy.interpolate import interp1d
from sklearn.preprocessing import minmax_scale

from feature.rated_window_entropy_map import *
from feature.histogram.histogram_peak_format import HistogramPeakFormat
from feature.histogram.similarity.histogram import *
from dataset.data_reader import DataReader


BIN_LENGTH = 4096
SRC_FEATURE_FILE_PATH = r'D:\PythonWorkspace\workspace\prototype_selection\feature\entropy_histogram_l1.spa'
DSC_FEATURE_DIR_PATH = r'D:\PythonWorkspace\workspace\prototype_selection\histogram_image\interp1d_{0}'.format(BIN_LENGTH)
HISTOGRAM_FORMATS = [HistogramPeakFormat.TYPE_OF_NORMAL,
                     HistogramPeakFormat.TYPE_OF_ALL_PEAKS,
                     HistogramPeakFormat.TYPE_OF_WEIGHT,
                     HistogramPeakFormat.TYPE_OF_HERONS]


def get_file_name(file_path):
    file_name = os.path.basename(file_path)
    file_name = os.path.splitext(file_name)[0]

    return file_name


if __name__ == '__main__':
    dataset = DataReader(file_name=SRC_FEATURE_FILE_PATH).get_dataset()
    dataset.shuffle()
    dataset.scale()

    for format in HISTOGRAM_FORMATS:
        features = list()
        count = 0
        for x, y in zip(dataset.X, dataset.y):
            count += 1

            if count % 1000 == 0:
                print('[DEBUG] The number of MALWARE files -> {0} / {1}'.format(count, len(dataset.y)))

            rated_window_entropy_map = RatedWindowEntropyMap(rating_level=1, entropy_histogram=x)
            entropy_map = rated_window_entropy_map.rated_window_entropy_map[0]
            entropy_map = np.asarray(entropy_map)

            scaled_entropy_map = minmax_scale(entropy_map)

            interpolator = interp1d(np.linspace(0, len(scaled_entropy_map), len(scaled_entropy_map)), scaled_entropy_map, kind='cubic')
            interpolated_entropy_map = interpolator(np.linspace(0, len(scaled_entropy_map), BIN_LENGTH))

            histogram = Histogram(interpolated_entropy_map)
            histogram.new_set_peaks()

            peak_format_from_histogram = HistogramPeakFormat(histogram=histogram, map_level=1, format_type=format)
            peak_format_from_histogram.extract_feature()

            features.append(peak_format_from_histogram.to_string(y))

        with open(os.path.join(DSC_FEATURE_DIR_PATH, '{0}_{1}.spa'.format(format, get_file_name(SRC_FEATURE_FILE_PATH))), 'w') as file_descriptor:
            for feature in features:
                file_descriptor.write(feature)
                file_descriptor.write('\n')
