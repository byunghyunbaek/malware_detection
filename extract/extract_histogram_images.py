import os
import glob
import numpy as np
import matplotlib.pyplot as plt

from scipy.interpolate import interp1d
from sklearn.preprocessing import minmax_scale

from malware_detection.feature.rated_window_entropy_map import RatedWindowEntropyMap
from learn_kit.histogram.similarity.histogram import *
from learn_kit.histogram.similarity.data.utils.plot_manager import *


def save_histogram_image(src_dir, dest_dir, bin_length):
    if not os.path.exists(dest_dir):
        os.mkdir(dest_dir)

    file_paths = glob.glob(os.path.join(src_dir, '*'))
    for file_path in file_paths:
        rated_window_entropy_map = RatedWindowEntropyMap(rating_level=1, file_path=file_path, load_histogram=True)

        entropy_histogram = np.asarray([])
        for entropy_map in rated_window_entropy_map.rated_window_entropy_map:
            entropy_histogram = np.concatenate((entropy_histogram, entropy_map))

        file_name = os.path.basename(file_path)
        file_name = os.path.splitext(file_name)[0] + '.png'

        analysis_entropy_map(entropy_histogram, dest_dir, file_name, bin_length)


def analysis_entropy_map(entropy_map, dest_image_dir_path, file_name, bin_length):
    scaled_entropy_map = minmax_scale(entropy_map)

    interpolator = interp1d(np.linspace(0, len(scaled_entropy_map), len(scaled_entropy_map)), scaled_entropy_map,
                            kind='cubic')

    interpolated_entropy_map = interpolator(np.linspace(0, len(scaled_entropy_map), bin_length))

    histogram = Histogram(interpolated_entropy_map)
    histogram.new_set_peaks()

    write_histogram(histogram, dest_image_dir_path, file_name)


def write_histogram(histogram, dir_path, file_name):
    max_peaks = histogram.max_peaks

    max_gradient_indexes = list()
    max_gradient_values = list()
    for peak in max_peaks:
        max_gradient_indexes.append(peak.x.index)
        max_gradient_values.append(peak.x.value)

    plt.figure(figsize=(15, 7))
    plt.plot(list(range(len(histogram.data))), histogram.data, color='k')
    plt.plot(max_gradient_indexes, max_gradient_values, 'ro', marker='o', markersize=4, color='b')

    for peak in max_peaks:
        inflection_point_indexes = [peak.x_left.index, peak.x_right.index]
        inflection_point_values = [peak.x_left.value, peak.x_right.value]

        plt.plot(inflection_point_indexes, inflection_point_values, color='m')

    plt.tick_params(labelsize=8)

    plt.grid()
    plt.savefig(os.path.join(dir_path, file_name))

    plt.close('all')


if __name__ == '__main__':
    ROOT_SRC_DIR_PATH = r'D:\python_workspace\workspace\prototype_selection\histogram\entropy_histogram_l1'
    ROOT_DSC_DIR_PATH = r'D:\python_workspace\workspace\prototype_selection\images\entropy_histgoram_peak_l1_interp1d_512'
    BIN_LENGTH = 512
    FAMILIES = ['train']

    if not os.path.exists(ROOT_DSC_DIR_PATH):
        os.mkdir(ROOT_DSC_DIR_PATH)

    save_histogram_image(ROOT_SRC_DIR_PATH, ROOT_DSC_DIR_PATH, BIN_LENGTH)

    # for family in FAMILIES:
    #     src_dir_path = os.path.join(ROOT_SRC_DIR_PATH, family)
    #     dsc_dir_path = os.path.join(ROOT_DSC_DIR_PATH, family)
    #
    #     save_histogram_image(src_dir_path, dsc_dir_path, BIN_LENGTH)
